{"version":3,"file":"static/js/640.64d9b5f5.chunk.js","mappings":"yBAAA,IAkBIA,EAEEC,EAAQ,SAACC,GACb,OArBiB,SACjBC,EACAC,EACAC,GAEA,IAAIC,EAAgBD,EAEdE,EAAWC,aAAY,WAC3BL,IAASG,GACLA,GAAiB,IACnBG,cAAcF,GACdH,IAEJ,GAAG,KAEH,OAAO,kBAAMK,cAAcF,EAAU,CACvC,CAKSG,EACL,SAACC,GACCC,YAAY,CAAC,OAAQD,GACvB,IACA,WACEC,YAAY,CAAC,UACf,GACAV,EAEJ,EAEAW,UAAY,SAACC,GAKgB,IAAD,GAJR,UAAdA,EAAEC,KAAK,KACTf,EAAOC,EAAMa,EAAEC,KAAK,KAGJ,SAAdD,EAAEC,KAAK,MACL,QAAJ,EAAAf,SAAI,OAAJ,IAEJ,C","sources":["devices/timer.worker.ts"],"sourcesContent":["const startTimer = (\n  onTick: (tick: number) => void,\n  onFinish: () => void,\n  countDownInSeconds: number\n) => {\n  let remainingTime = countDownInSeconds;\n\n  const interval = setInterval(() => {\n    onTick(--remainingTime);\n    if (remainingTime <= 0) {\n      clearInterval(interval);\n      onFinish();\n    }\n  }, 1000);\n\n  return () => clearInterval(interval);\n};\n\nlet stop: (() => void) | undefined;\n\nconst start = (countDown: number) => {\n  return startTimer(\n    (remaining) => {\n      postMessage(['Tick', remaining]);\n    },\n    () => {\n      postMessage(['Finish']);\n    },\n    countDown,\n  );\n};\n\nonmessage = (e) => {\n  if (e.data[0] === 'Start') {\n    stop = start(e.data[1]);\n  }\n\n  if (e.data[0] === 'Stop') {\n    stop?.();\n  }\n};\n\nexport {};\n"],"names":["stop","start","countDown","onTick","onFinish","countDownInSeconds","remainingTime","interval","setInterval","clearInterval","startTimer","remaining","postMessage","onmessage","e","data"],"sourceRoot":""}